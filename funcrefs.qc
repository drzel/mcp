// prototypes
void ShowMenu(float menuType);
void W_WeaponFrame();
void player_pain();
void player_stand1();
void spawn_tfog(vector org);
void spawn_tdeath(vector org, entity death_owner);
void T_RadiusDamage(entity bomb, entity attacker, float rad, entity ignore, string dtype);
void SpawnBlood (vector org, float damage);
void launch_spike (vector org, vector dir);
void superspike_touch();
void KillSound (entity targ, entity attacker);
void changelevel_touch();
void CopyToBodyQue (entity ent); 
void IntermissionThink();
void set_suicide_frame();
void respawn();
void DecodeLevelParms();
void PlayerDie();
void T_Damage(entity targ, entity inflictor, entity attacker, float damage);
void SpawnBlood(vector org, float damage);
void MenuInput(float inp);
void W_ZutChangeWeapon(float imp);
void MCP_Attack(float wpn);
void W_SpecialSkill();
void ReloadWeapon(float wpn);
void ChangeHudAmmo(entity owner, float wpn);
void ChangeWeaponModel(float wpn);
void ShowMenu(float mt);
void SwapTeam();
void ChangeTeam();
void ChangeRoleMenu();
void ChangeRole(float r);
void ThrowMCPFlag();
void JoinTeam(float t);
void ThrowGrenade();
void PrimeGrenade();
void FlagInfo();
void InvInfo();
void W_FireLightning2();
float crandom();
void DropGrenPack();
void DropArmourShard();
void DropHealthPack();
void GoombaStomp();
void DownloadShit(float imp);
void HitSound(entity targ, entity inflictor, entity attacker, float damage);
void KillAllDrops(); 
void MCPHelp(float imp);
void ArmourShard_Touch();
void TogglePlayerReady(float ps);
float MyRNG(float x);
void SetTeamFragsColourName();
void CheckStickyLimit();
void HarpoonToward(entity targ, entity inflictor, entity attacker);
void ChangeMCPFlagState(float zfstate, entity o);
void mcpflagcap_touch();
void SoundTeam (float team, entity exclude, string file);
void ZutRadiusCheck(vector org, float radius, entity ignore, float team);
void SpawnMissile();
void SpawnClusterGren();
void SpawnSticky();
entity MCPSpawnPoint ();
float GetTeamCountCurrent(float team_no);
void SetPlayerModelSkin();
void SetPlayerSkin();
void KillReloadEnt();
void KillC4();
void KillCloakEnt();
void KillTeleball();
void KillGrenTimer();
void KillLittleProxy();
void KillHarpoonTimers();
void DisableGrenEffectOnDeath();
void DeathMCPFlag();
void DisableHarpoonPull();
void DestroyBeartraps();
void SpawnAliasHelper();
void SetAliases1(entity e);
void SetAliases2(entity e);
void SetAliases3(entity e);
void ExplodeFragGrenade();
void ClusterBigSplit();
void ExplodeBigProxy();
void ExplodeFlashGrenade();
void ExplodeAirBlastGrenade();
void ExplodeBearTrap();
void StickyGrenade();
void ExplodeLeechGrenade();
void BearTrap_Think();
float GetInfo(entity e, string setting, string defaultValue);
void SpawnPlayerZut();
void SetPlayerSpeed();
void MenuInputImpulses();
void DeadOrAliveImpulses();
void ClearPlayerState();
void RegenCells();
void RegenHealthArmour();
void CPrintRefresh();
string MenuString(float menuType) ;
string GenSpace(float strLengthCurrent, float strLengthDesired) ; 
string (float current) TeamCountToString;
string RoleCountToString(float current, float max);
float GetTeamCountCurrent(float team);
float GetRoleCount(float r, float t);
float GetInfo(entity e, string setting, string defaultValue);
float AutoPickTeam();
void NextWeapon();
void PrevWeapon();
void LastWeapon();
void SetNextRespawn(entity ent, float sui);
void KillStreak(entity player);
float isQuickShotting();
float VisualWeapon();
void StartQuickShot(float imp);
void StopQuickShot(float imp);
void ReloadNext();